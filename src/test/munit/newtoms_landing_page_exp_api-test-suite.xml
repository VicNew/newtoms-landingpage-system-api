<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
    <munit:config name="munit" doc:name="MUnit configuration"/>
    <spring:beans>
        <spring:import resource="classpath:newtoms_landing_page_exp_api.xml"/>
        <spring:import resource="classpath:newtoms_landing_page_business.xml"/>
        <spring:import resource="classpath:mysql_landingpage_database_config.xml"/>
        <spring:import resource="classpath:mysql_landingpage_database.xml"/>
        <spring:import resource="classpath:messages-for-test-suite.xml"/>
    </spring:beans>
    <global-property name="mysql.host" value="127.0.0.1" doc:name="Global Property"/>
    <global-property name="mysql.port" value="3306" doc:name="Global Property"/>
    <global-property name="mysql.user" value="root" doc:name="Global Property"/>
    <global-property name="mysql.password" value="root" doc:name="Global Property"/>
    <global-property name="mysql.schema" value="newtoms-landingpage" doc:name="Global Property"/>
    <munit:before-test name="newtoms_landing_page_exp_api-test-suiteBefore_Test" description="Before tests actions">
        <flow-ref name="setExpectedDocumentTemplatesByIdList" doc:name="setExpectedDocumentTemplatesByIdList"/>
        <flow-ref name="setExpectedCreatedLeadCompleteResponse" doc:name="setExpectedCreatedLeadCompleteResponse"/>
    </munit:before-test>
    <munit:test name="GivenATemplateIdWhenGetLandingPageTemplateByGivenIdAsJsonThenReturnAResponse" description="GivenATemplateIdWhenGetLandingPageTemplateByGivenIdAsJsonThenReturnAResponse">
        <mock:when messageProcessor="mule:sub-flow" doc:name="Mock - getDocumentTemplateConfigByIdForLandingPage">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('getDocumentTemplateConfigByIdForLandingPage')]"/>
            </mock:with-attributes>
            <mock:then-return payload="#[flowVars.expectedDocumentTemplatesById]" mimeType="application/java"/>
        </mock:when>
        <munit:set payload="#[]" doc:name="Set Message">
            <munit:inbound-properties>
                <munit:inbound-property key="http.uri.params" value="#[{ &quot;id&quot;: 1}]" mimeType="application/json"/>
            </munit:inbound-properties>
        </munit:set>
        <flow-ref name="getLandingPageTemplateByGivenIdAsJson" doc:name="Flow-ref to getLandingPageTemplateByGivenIdAsJson"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="GivenATemplateIdWhenGetLandingPageTemplateByGivenIdAsJsonThenReturnExpectedTemplate" description="GivenATemplateIdWhenGetLandingPageTemplateByGivenIdAsJsonThenReturnExpectedTemplate">
        <mock:when messageProcessor="mule:sub-flow" doc:name="Mock - getDocumentTemplateConfigByIdForLandingPage">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('getDocumentTemplateConfigByIdForLandingPage')]"/>
            </mock:with-attributes>
            <mock:then-return payload="#[flowVars.expectedDocumentTemplatesById[0]]" mimeType="application/java"/>
        </mock:when>
        <munit:set payload="#[]" doc:name="Set Message">
            <munit:inbound-properties>
                <munit:inbound-property key="http.uri.params" value="#[{ &quot;id&quot;: 1}]" mimeType="application/json"/>
            </munit:inbound-properties>
        </munit:set>
        <flow-ref name="getLandingPageTemplateByGivenIdAsJson" doc:name="Flow-ref to getLandingPageTemplateByGivenIdAsJson"/>
        <flow-ref name="assertForExpectedDocumentTemplateResponse" doc:name="assertForExpectedDocumentTemplateResponse"/>
    </munit:test>
    <munit:test name="GivenATemplateIdWhenGetLandingPageTemplateByGivenIdAsJsonThenCallTheRightProcess" description="GivenATemplateIdWhenGetLandingPageTemplateByGivenIdAsJsonThenCallTheRightProcess">
        <mock:when messageProcessor="mule:sub-flow" doc:name="Mock - getDocumentTemplateConfigByIdForLandingPage">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('getDocumentTemplateConfigByIdForLandingPage')]"/>
            </mock:with-attributes>
            <mock:then-return payload="#[flowVars.expectedDocumentTemplatesById[0]]" mimeType="application/java"/>
        </mock:when>
        <munit:set payload="#[]" doc:name="Set Message">
            <munit:inbound-properties>
                <munit:inbound-property key="http.uri.params" value="#[{ &quot;id&quot;: 1}]" mimeType="application/json"/>
            </munit:inbound-properties>
        </munit:set>
        <flow-ref name="getLandingPageTemplateByGivenIdAsJson" doc:name="Flow-ref to getLandingPageTemplateByGivenIdAsJson"/>
        <mock:verify-call messageProcessor="mule:sub-flow" doc:name="Verify getDocumentTemplateConfigByIdForLandingPage Call">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('getDocumentTemplateConfigByIdForLandingPage')]"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:test name="GivenATemplateIdWhenGetLandingPageTemplateByGivenIdAsJsonThenGetTemplateIdFromUriParameters" description="GivenATemplateIdWhenGetLandingPageTemplateByGivenIdAsJsonThenGetTemplateIdFromUriParameters">
        <mock:when messageProcessor="mule:sub-flow" doc:name="Mock - getDocumentTemplateConfigByIdForLandingPage">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('getDocumentTemplateConfigByIdForLandingPage')]"/>
            </mock:with-attributes>
            <mock:then-return payload="#[flowVars.expectedDocumentTemplatesById[0]]" mimeType="application/java"/>
        </mock:when>
        <munit:set payload="#[]" doc:name="Set Message">
            <munit:inbound-properties>
                <munit:inbound-property key="http.uri.params" value="#[{ &quot;id&quot;: 1}]" mimeType="application/json"/>
            </munit:inbound-properties>
        </munit:set>
        <flow-ref name="getLandingPageTemplateByGivenIdAsJson" doc:name="Flow-ref to getLandingPageTemplateByGivenIdAsJson"/>
        <mock:verify-call messageProcessor="mule:set-variable" doc:name="Verify set idDocumentTemplates Variable Call">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['set idDocumentTemplates Variable']"/>
                <mock:with-attribute name="variableName" whereValue="idDocumentTemplates"/>
                <mock:with-attribute name="value" whereValue="#[1]"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:test name="GivenATemplateIdWhenGetLandingPageTemplateByGivenIdAsJsonThenReturnAJsonFormatResponse" description="GivenATemplateIdWhenGetLandingPageTemplateByGivenIdAsJsonThenReturnAJsonFormatResponse">
        <mock:when messageProcessor="mule:sub-flow" doc:name="Mock - getDocumentTemplateConfigByIdForLandingPage">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('getDocumentTemplateConfigByIdForLandingPage')]"/>
            </mock:with-attributes>
            <mock:then-return payload="#[flowVars.expectedDocumentTemplatesById[0]]" mimeType="application/java"/>
        </mock:when>
        <munit:set payload="#[]" doc:name="Set Message">
            <munit:inbound-properties>
                <munit:inbound-property key="http.uri.params" value="#[{ &quot;id&quot;: 1}]" mimeType="application/json"/>
            </munit:inbound-properties>
        </munit:set>
        <flow-ref name="getLandingPageTemplateByGivenIdAsJson" doc:name="Flow-ref to getLandingPageTemplateByGivenIdAsJson"/>
        <mock:verify-call messageProcessor="json:object-to-json-transformer" doc:name="Verify Object to JSON Call">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Object to JSON']"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:test name="newtoms_landing_page_exp_api-test-suite-get:/landingpage/template/{id}:newtoms_landing_page_exp_api-configTest" description="Test">
        <mock:when messageProcessor="mule:sub-flow" doc:name="Mock - getLandingPageTemplateByGivenIdAsJson">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('getLandingPageTemplateByGivenIdAsJson')]"/>
            </mock:with-attributes>
            <mock:then-return payload="#[flowVars.expectedDocumentTemplatesById[0]]" mimeType="application/java"/>
        </mock:when>
        <munit:set payload="#[]" doc:name="Set Message">
            <munit:inbound-properties>
                <munit:inbound-property key="http.uri.params" value="#[{ &quot;id&quot;: 1}]" mimeType="application/json"/>
            </munit:inbound-properties>
        </munit:set>
        <flow-ref name="get:/landingpage/template/{id}:newtoms_landing_page_exp_api-config" doc:name="Flow-ref to get:/landingpage/template/{id}:newtoms_landing_page_exp_api-config"/>
        <mock:verify-call messageProcessor="mule:sub-flow" doc:name="Verify getLandingPageTemplateByGivenIdAsJson Call">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('getLandingPageTemplateByGivenIdAsJson')]"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:test name="GivenANewLeadRequestWhenpostLeadFromLandingPageThenReturnAResponse" description="GivenANewLeadRequestWhenpostLeadFromLandingPageThenReturnAResponse">
        <mock:when messageProcessor="mule:sub-flow" doc:name="Mock - createANewLeadFromLandingPage">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('createANewLeadFromLandingPage')]"/>
            </mock:with-attributes>
            <mock:then-return payload="#[flowVars.expectedCreatedLeadCompleteResponse]" mimeType="application/java"/>
        </mock:when>
        <flow-ref name="getNewLeadRequest" doc:name="getNewLeadRequest"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <flow-ref name="postLeadFromLandingPage" doc:name="Flow-ref to postLeadFromLandingPage"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="GivenANewLeadRequestWhenpostLeadFromLandingPageThenReturnACompleteLeadResponse" description="GivenANewLeadRequestWhenpostLeadFromLandingPageThenReturnACompleteLeadResponse">
        <mock:when messageProcessor="mule:sub-flow" doc:name="Mock - createANewLeadFromLandingPage">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('createANewLeadFromLandingPage')]"/>
            </mock:with-attributes>
            <mock:then-return payload="#[flowVars.expectedCreatedLeadCompleteResponse]" mimeType="application/java"/>
        </mock:when>
        <flow-ref name="getNewLeadRequest" doc:name="getNewLeadRequest"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <flow-ref name="postLeadFromLandingPage" doc:name="Flow-ref to postLeadFromLandingPage"/>
        <flow-ref name="assertForACompleteLeadResponse" doc:name="assertForACompleteLeadResponse"/>
    </munit:test>
    <munit:test name="GivenANewLeadRequestWhenpostLeadFromLandingPageThenCreateANewLeadFromLandingPageWasCalled" description="GivenANewLeadRequestWhenpostLeadFromLandingPageThenCreateANewLeadFromLandingPageWasCalled">
        <mock:when messageProcessor="mule:sub-flow" doc:name="Mock - createANewLeadFromLandingPage">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('createANewLeadFromLandingPage')]"/>
            </mock:with-attributes>
            <mock:then-return payload="#[flowVars.expectedCreatedLeadCompleteResponse]" mimeType="application/java"/>
        </mock:when>
        <flow-ref name="getNewLeadRequest" doc:name="getNewLeadRequest"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <flow-ref name="postLeadFromLandingPage" doc:name="Flow-ref to postLeadFromLandingPage"/>
        <mock:verify-call messageProcessor="mule:sub-flow" doc:name="Verify createANewLeadFromLandingPage Call">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('createANewLeadFromLandingPage')]"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:test name="GivenANewLeadRequestWhenpostLeadFromLandingPageThenTransformJsonRequestToObject" description="GivenANewLeadRequestWhenpostLeadFromLandingPageThenTransformJsonRequestToObject">
        <mock:when messageProcessor="mule:sub-flow" doc:name="Mock - createANewLeadFromLandingPage">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('createANewLeadFromLandingPage')]"/>
            </mock:with-attributes>
            <mock:then-return payload="#[flowVars.expectedCreatedLeadCompleteResponse]" mimeType="application/java"/>
        </mock:when>
        <flow-ref name="getNewLeadRequest" doc:name="getNewLeadRequest"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <flow-ref name="postLeadFromLandingPage" doc:name="Flow-ref to postLeadFromLandingPage"/>
        <mock:verify-call messageProcessor="json:json-to-object-transformer" doc:name="Verify transform Json request to Object Call">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['JSON to Object']"/>
                <mock:with-attribute name="returnClass" whereValue="java.util.Map"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:test name="GivenANewLeadRequestWhenpostLeadFromLandingPageThenTransformObjectResponseToJson" description="GivenANewLeadRequestWhenpostLeadFromLandingPageThenTransformObjectResponseToJson">
        <mock:when messageProcessor="mule:sub-flow" doc:name="Mock - createANewLeadFromLandingPage">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('createANewLeadFromLandingPage')]"/>
            </mock:with-attributes>
            <mock:then-return payload="#[flowVars.expectedCreatedLeadCompleteResponse]" mimeType="application/java"/>
        </mock:when>
        <flow-ref name="getNewLeadRequest" doc:name="getNewLeadRequest"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <flow-ref name="postLeadFromLandingPage" doc:name="Flow-ref to postLeadFromLandingPage"/>
        <mock:verify-call messageProcessor="json:object-to-json-transformer" doc:name="Verify transform Object response to Json Call">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Object to JSON']"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:test name="GivenANewLeadRequestWhenpostLeadFromLandingPageThenSetContentTypeHeaderForResponse" description="GivenANewLeadRequestWhenpostLeadFromLandingPageThenSetContentTypeHeaderForResponse">
        <mock:when messageProcessor="mule:sub-flow" doc:name="Mock - createANewLeadFromLandingPage">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('createANewLeadFromLandingPage')]"/>
            </mock:with-attributes>
            <mock:then-return payload="#[flowVars.expectedCreatedLeadCompleteResponse]" mimeType="application/java"/>
        </mock:when>
        <flow-ref name="getNewLeadRequest" doc:name="getNewLeadRequest"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <flow-ref name="postLeadFromLandingPage" doc:name="Flow-ref to postLeadFromLandingPage"/>
        <mock:verify-call messageProcessor="mule:set-property" doc:name="Verify transform Object response to Json Call">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['set Content-Type Property']"/>
                <mock:with-attribute name="propertyName" whereValue="Content-Type"/>
                <mock:with-attribute name="value" whereValue="application/json"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
</mule>
